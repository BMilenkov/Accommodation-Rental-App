name: CI-CD-DockerCompose

on:
  push:
    branches:
      - "*"

env:
  REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  aws_instance_prep:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.set_env.outputs.instance_id }}
      public_ip: ${{ steps.get_ip.outputs.public_ip }}
      branch_name: ${{ steps.vars.outputs.branch_name }}
      spring_profile: ${{ steps.set_profile.outputs.spring_profile }}
    steps:
      - name: Set branch name
        id: vars
        run: echo "branch_name=$(echo ${{ github.ref_name }} | tr '/' '-')" >> "$GITHUB_OUTPUT"

      - name: Determine Spring Profile
        id: set_profile
        run: |
          if [ "${{ github.ref_name }}" = "master" ]; then
            echo "spring_profile=prod" >> "$GITHUB_OUTPUT"
          else
            echo "spring_profile=dev" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region $AWS_REGION

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=accommodations-${{ steps.vars.outputs.branch_name }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)

          if [[ "$INSTANCE_ID" == "None" ]]; then
            echo "EXISTING_INSTANCE=false" >> $GITHUB_ENV
          else
            echo "EXISTING_INSTANCE=true" >> $GITHUB_ENV
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          fi

      - name: Launch EC2 instance if needed
        if: env.EXISTING_INSTANCE == 'false'
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --launch-template LaunchTemplateId=${{ secrets.EC2_LAUNCH_TEMPLATE_ID }} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=accommodations-${{ steps.vars.outputs.branch_name }}}]" \
            --query 'Instances[0].InstanceId' --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait until EC2 is ready
        run: aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }}

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "public_ip=$PUBLIC_IP" >> "$GITHUB_OUTPUT"

      - name: Set instance ID output
        id: set_env
        run: echo "instance_id=${{ env.INSTANCE_ID }}" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: aws_instance_prep
    outputs:
      branch_name: ${{ needs.aws_instance_prep.outputs.branch_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "$REGISTRY" --password-stdin

      - name: Build and push backend image
        run: |
          docker build -t $REGISTRY/accommodation-backend:${{ needs.aws_instance_prep.outputs.branch_name }}-latest ./Backend
          docker push $REGISTRY/accommodation-backend:${{ needs.aws_instance_prep.outputs.branch_name }}-latest

      - name: Build and push frontend image with dynamic VITE_API_URL
        run: |
          export VITE_API_URL="http://${{ needs.aws_instance_prep.outputs.public_ip }}/api"
          docker build \
            --build-arg VITE_API_URL=$VITE_API_URL \
            -t $REGISTRY/accommodation-frontend:${{ needs.aws_instance_prep.outputs.branch_name }}-latest ./Frontend
          docker push $REGISTRY/accommodation-frontend:${{ needs.aws_instance_prep.outputs.branch_name }}-latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ aws_instance_prep, build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy docker-compose.yml and .env to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }}:/home/ec2-user/

          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} << EOF
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} > .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo VITE_API_URL=http://${{ needs.aws_instance_prep.outputs.public_ip }}/api >> .env
            echo DOCKERHUB_USER=${{ secrets.DOCKERHUB_USERNAME }} >> .env
            echo BRANCH_NAME=${{ needs.aws_instance_prep.outputs.branch_name }} >> .env
            echo SPRING_PROFILE=${{ needs.aws_instance_prep.outputs.spring_profile }} >> .env
          EOF

      - name: Run docker-compose on EC2
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} << EOF
            cd /home/ec2-user
            docker-compose --env-file .env down || true
            docker-compose --env-file .env up -d
          EOF