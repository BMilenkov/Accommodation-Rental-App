name: CI-CD-K8s

on:
  push:
    branches: [ "*" ]

env:
  REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      branch_tag: ${{ steps.vars.outputs.branch_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Set branch name
        id: vars
        run: echo "branch_tag=$(echo ${{ github.ref_name }} | tr '/' '-')" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "$REGISTRY" --password-stdin

      - name: Build & push backend
        run: |
          docker build -t $REGISTRY/accommodation-backend:${{ steps.vars.outputs.branch_tag }}-latest ./Backend
          docker push $REGISTRY/accommodation-backend:${{ steps.vars.outputs.branch_tag }}-latest

  host:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Set branch tag
        run: echo "TAG=${{ needs.build.outputs.branch_tag }}" >> "$GITHUB_ENV"

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region $AWS_REGION

      - name: Reuse or launch EC2
        id: ec2
        run: |
          ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=accommodations-${TAG}" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)
          if [ "$ID" = "None" ]; then
            ID=$(aws ec2 run-instances \
              --launch-template LaunchTemplateId=${{ secrets.EC2_LAUNCH_TEMPLATE_ID }} \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=accommodations-${TAG}}]" \
              --query 'Instances[0].InstanceId' --output text)
          fi
          echo "EC2_ID=$ID" >> $GITHUB_OUTPUT

      - name: Wait until EC2 is ready
        run: aws ec2 wait instance-status-ok --instance-ids ${{ steps.ec2.outputs.EC2_ID }}

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          IP=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2.outputs.EC2_ID }} \
               --query 'Reservations[0].Instances[0].PublicIpAddress' \
               --output text)
          echo "ec2_ip=$IP" >> "$GITHUB_OUTPUT"

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Install k3d & cluster (SSH)
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ steps.get_ip.outputs.ec2_ip }} <<'EOF'
            if ! command -v k3d >/dev/null 2>&1; then
              curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
            fi
            if ! k3d cluster list | grep acc-cluster >/dev/null; then
              k3d cluster create acc-cluster --agents 1 -p "80:80@loadbalancer"
            fi
            echo "k3d ready"
          EOF

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, host ]
    steps:
      - uses: actions/checkout@v3

      - name: Decide overlay (dev/prod)
        id: overlay
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "overlay=prod" >> "$GITHUB_OUTPUT"
          else
            echo "overlay=dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Build & push frontend with dynamic VITE_API_URL
        run: |
          export VITE_API_URL="http://${{ needs.host.outputs.ec2_ip }}/api"
          docker build \
            --build-arg VITE_API_URL=$VITE_API_URL \
            -t $REGISTRY/accommodation-frontend:${{ needs.build.outputs.branch_tag }}-latest ./Frontend
          docker push $REGISTRY/accommodation-frontend:${{ needs.build.outputs.branch_tag }}-latest

      - name: Replace image tags in kustomization
        working-directory: ./k8s/overlays/${{ steps.overlay.outputs.overlay }}
        run: |
          kustomize edit set image dummy/backend=${{ env.REGISTRY }}/accommodation-backend:${{ needs.build.outputs.branch_tag }}-latest
          kustomize edit set image dummy/frontend=${{ env.REGISTRY }}/accommodation-frontend:${{ needs.build.outputs.branch_tag }}-latest

      - name: Inject secret values into base secret.yaml
        working-directory: ./k8s/base
        run: |
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          envsubst < secret.yaml > secret.yaml.tmp && mv secret.yaml.tmp secret.yaml

      - name: Inject EC2 IP as FRONTEND_HOST in configMapGenerator
        working-directory: ./k8s/overlays/${{ steps.overlay.outputs.overlay }}
        run: |
          sed -i 's|FRONTEND_HOST=.*|FRONTEND_HOST=${{ needs.host.outputs.ec2_ip }}|' kustomization.yaml

      - name: Copy manifests to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ec2_key.pem" ./k8s/ ec2-user@${{ needs.host.outputs.ec2_ip }}:/home/ec2-user/k8s/

      - name: Apply manifests via kubectl (SSH)
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ needs.host.outputs.ec2_ip }} <<EOF
            export KUBECONFIG=\$(k3d kubeconfig write acc-cluster)
            kubectl create namespace accommodations-${{ steps.overlay.outputs.overlay }} --dry-run=client -o yaml | kubectl apply -f -
            kubectl apply -k /home/ec2-user/k8s/overlays/${{ steps.overlay.outputs.overlay }} -n accommodations-${{ steps.overlay.outputs.overlay }}
            kubectl rollout status deployment/backend -n accommodations-${{ steps.overlay.outputs.overlay }}
            kubectl rollout status deployment/frontend -n accommodations-${{ steps.overlay.outputs.overlay }}
            echo "Deployed on accommodations-${{ steps.overlay.outputs.overlay }}"
          EOF
